#!/bin/bash


#############################
PROGNAME=$(basename $0)
VERSION="v0.01"
#############################
PROVIDER=kind
#############################

dir=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)


usage() {
    echo "Deployment tool for various versions of kubernetes environment"
    echo "Usage: $PROGNAME [OPTIONS] <kubernetes-version>"
    echo ""
    echo "<kubernetes-version>: Enter kubernetes version [v1.18.2, v1.17, v1.16, v1.15, v1.14, v1.13, v1.12, v1.11]"
    echo ""
    echo "Options:"
    echo "  -p, --provider : select provider [kind(default)]"
    echo "  -h, --help"
    echo "      --version"
    echo ""
    echo "Find more information at: https://github.com/k-shino/kubetest/blob/master/README.md"
    exit 1
}

for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            usage
            exit 1
            ;;
        '--version' )
            echo $VERSION
            exit 1
            ;;
        '-p'|'--provider' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROGNAME: option requires an argument -- $1" 1>&2
                exit 1
            fi
            PROVIDER="$2"
            shift 2
            ;;
        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
            param=( ${param[@]} "$1" )
            shift 1
            fi
            ;;
    esac
done

echo "param: ${param[0]} ${param[1]}"

if [[ -z "${param[0]}" ]] || [[ -z "${param[1]}" ]] ; then
    echo "$PROGNAME: too few arguments" 1>&2
    echo "Try '$PROGNAME --help' for more information." 1>&2
    exit 1
fi

CMD=${param[0]}
PARAM=${param[1]}

echo "CMD: $CMD"
echo "PARAM: $PARAM"

case "$CMD" in

    'deploy' )

        if [ "$PROVIDER" = "kind" ]; then
            if [ ! -d ${dir}/kind/$PARAM ]; then
                echo "[ERROR] Unsupported kubernetes version is specified."
                exit 1
            fi
            kustomize build ${dir}/kind/$PARAM | yq delete - metadata | kind create cluster --config -
        else
            echo "PROVIDER error"
            exit 1
        fi
        ;;
    *)
        echo "command error"
        exit 1
        ;;
esac
